function ntb_Main()
    clear all; close all; clc; 
    %% Initial values    
    no_gens = 3e2; % number of generations
    no_members = 100; % number of parents / members per generation
    no_genes = 10; % number of genes; polynomial coefficients
    no_steps = 10; % number of loop iteration between each plot
    pad_size = 2^13; % size of vector for zero padding for FFT
    coeff = 100; % Range of phase coefficient to try (+- Range) as random number
    test = @(technique) ...
        ntb_test(no_gens, no_members, no_genes, no_steps, pad_size, technique, coeff);
    test(1);
    test(0);
end

function ntb_test(no_gens, no_members, no_genes, no_steps, pad_size, technique, coeff)
    %% Init program
    savefig = @(num) saveas(figure(num), sprintf('fig%d', num), 'bmp');
    printl = @(varargin) display(arrayfun(@(i) sprintf('%c',i), cell2mat(varargin)));
    progress = @(i,n,t) printl(...
        'Program running...', ...
        sprintf('\n\tIteration: %d', i), ...
        sprintf('\n\tPercentage completed: %.4f%%', (i/n)*100), ...
        sprintf('\n\tTime elapsed: %.5f seconds', t), ...
        sprintf('\n\tEstimated time remaining: %.5f minutes\n', ( (t/(i/n)) - t)/60) );

    % assign default values for fitness function
    fit_fun = @(entities) ... 
         fitnesses(entities, no_genes, coeff, pad_size, technique);

    %% Initiate parents.
    % Create phase coefficient for all parents.
    % (matrix of size no_genes x no_members)
    parents = coeff*(rand(no_genes, no_members)-0.5);
    parent_grades = fit_fun(parents);

    %% Initiate offspring
    % populate offspring Fitness values vectors with zero (and convergence)
    % The two values initially used are F (Fitness parameters) and parents
    new_generation=zeros(no_genes, 2*no_members);
    sorted_generation=zeros(size(new_generation));

    %% Evolutionary Loop
    for gen_i = 1:no_gens
        if (gen_i == 1)
            figure(2); figure(3); figure(1);
            tic; % First pass has a pause to organize graph on screen
        end;

        % half of offspring are yielded by random mutations
        mutated_generation = coeff*(rand(no_genes,no_members/2)-0.5);

        % half of offspring created yielded by parents
        offspring_generation = parents(:,1:no_members/2) + ...
            (0.5*coeff)*(rand(no_genes,no_members/2)-0.5);

        offspring = [mutated_generation, offspring_generation];    
        offspring_grades = fit_fun(offspring); % Fitness of offspring ii

        grades=[parent_grades offspring_grades]; % Fitness parameters of all parents & offspring
        new_generation=[parents offspring];

        % Select the best members for next generation
        [grades_sorted, orderAll] = sort(grades);
        for ii=1:no_members
            prev_index = orderAll(ii);
            sorted_generation(:,ii)=new_generation(:,prev_index);
        end

        % Create next generation (remove unwanted members)
        parent_grades=grades_sorted(1,1:no_members);
        parents=sorted_generation(:,1:no_members);
        convergence(gen_i)=mean(parent_grades(1:no_members));

    %% Plot figure only every no_steps generations
        if (mod(gen_i, no_steps) == 0 || gen_i == no_members)
            figure(1);
            hold off;
            plot(offspring_grades,'+b');
            hold on;
            plot(parent_grades,'+r'); grid on;
            legend('Offspring Fitness','Next generation fitness');
            axis([1 no_members 0 2*max(parent_grades)]);

            figure(2);
            title('Algorithm Convergence');
            plot(convergence,'Linewidth',2);
            grid on;
            xlabel('# of Generations');
            ylabel('Average Best Grade');
            [I1best,I2best,I3best,phase] = ...
                LaserPropagation(parents(:,1), pad_size, technique);

            figure(3);
            title('Best Result');
            subplot(2,1,1);
            plot(I1best,'b'); hold on; plot(I2best,'r');
            plot(I3best,'k'); hold off;
            grid on; legend('I1','I2','I3');
            subplot(2,1,2);
            plot(phase,'k','Linewidth',2);
            grid on;

            progress(gen_i,no_gens,toc);
        end
    end; diary OFF; toc;
    savefig(1); savefig(2); savefig(3);
end